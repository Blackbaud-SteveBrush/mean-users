{
  "version": 3,
  "file": "app.js",
  "sources": [
    "bower_components/checklist-model/checklist-model.js",
    "public/app/app.js",
    "public/app/scripts/services/auth.js",
    "public/app/scripts/services/permission.js",
    "public/app/scripts/services/role.js",
    "public/app/views/admin/permissions.js",
    "public/app/views/admin/roles.js",
    "public/app/views/admin/users.js",
    "public/app/views/home.js",
    "public/app/views/login.js",
    "public/app/views/profile.js",
    "public/app/views/register.js",
    "tmp/templates.js"
  ],
  "names": [],
  "mappingsxppGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A",
  "sourceRoot": "../..",
  "sourcesContent": [
    "/**\n * Checklist-model\n * AngularJS directive for list of checkboxes\n * https://github.com/vitalets/checklist-model\n * License: MIT http://opensource.org/licenses/MIT\n */\n\n /* commonjs package manager support (eg componentjs) */\n if (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n   module.exports = 'checklist-model';\n }\n\nangular.module('checklist-model', [])\n.directive('checklistModel', ['$parse', '$compile', function($parse, $compile) {\n  // contains\n  function contains(arr, item, comparator) {\n    if (angular.isArray(arr)) {\n      for (var i = arr.length; i--;) {\n        if (comparator(arr[i], item)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // add\n  function add(arr, item, comparator) {\n    arr = angular.isArray(arr) ? arr : [];\n      if(!contains(arr, item, comparator)) {\n          arr.push(item);\n      }\n    return arr;\n  }\n\n  // remove\n  function remove(arr, item, comparator) {\n    if (angular.isArray(arr)) {\n      for (var i = arr.length; i--;) {\n        if (comparator(arr[i], item)) {\n          arr.splice(i, 1);\n          break;\n        }\n      }\n    }\n    return arr;\n  }\n\n  // http://stackoverflow.com/a/19228302/1458162\n  function postLinkFn(scope, elem, attrs) {\n     // exclude recursion, but still keep the model\n    var checklistModel = attrs.checklistModel;\n    attrs.$set(\"checklistModel\", null);\n    // compile with `ng-model` pointing to `checked`\n    $compile(elem)(scope);\n    attrs.$set(\"checklistModel\", checklistModel);\n\n    // getter for original model\n    var checklistModelGetter = $parse(checklistModel);\n    var checklistChange = $parse(attrs.checklistChange);\n    var checklistBeforeChange = $parse(attrs.checklistBeforeChange);\n    var ngModelGetter = $parse(attrs.ngModel);\n\n\n\n    var comparator = angular.equals;\n\n    if (attrs.hasOwnProperty('checklistComparator')){\n      if (attrs.checklistComparator[0] == '.') {\n        var comparatorExpression = attrs.checklistComparator.substring(1);\n        comparator = function (a, b) {\n          return a[comparatorExpression] === b[comparatorExpression];\n        };\n\n      } else {\n        comparator = $parse(attrs.checklistComparator)(scope.$parent);\n      }\n    }\n\n    // watch UI checked change\n    var unbindModel = scope.$watch(attrs.ngModel, function(newValue, oldValue) {\n      if (newValue === oldValue) {\n        return;\n      }\n\n      if (checklistBeforeChange && (checklistBeforeChange(scope) === false)) {\n        ngModelGetter.assign(scope, contains(checklistModelGetter(scope.$parent), getChecklistValue(), comparator));\n        return;\n      }\n\n      setValueInChecklistModel(getChecklistValue(), newValue);\n\n      if (checklistChange) {\n        checklistChange(scope);\n      }\n    });\n\n    // watches for value change of checklistValue\n    var unbindCheckListValue = scope.$watch(getChecklistValue, function(newValue, oldValue) {\n      if( newValue != oldValue && angular.isDefined(oldValue) && scope[attrs.ngModel] === true ) {\n        var current = checklistModelGetter(scope.$parent);\n        checklistModelGetter.assign(scope.$parent, remove(current, oldValue, comparator));\n        checklistModelGetter.assign(scope.$parent, add(current, newValue, comparator));\n      }\n    }, true);\n\n    var unbindDestroy = scope.$on('$destroy', destroy);\n\n    function destroy() {\n      unbindModel();\n      unbindCheckListValue();\n      unbindDestroy();\n    }\n\n    function getChecklistValue() {\n      return attrs.checklistValue ? $parse(attrs.checklistValue)(scope.$parent) : attrs.value;\n    }\n\n    function setValueInChecklistModel(value, checked) {\n      var current = checklistModelGetter(scope.$parent);\n      if (angular.isFunction(checklistModelGetter.assign)) {\n        if (checked === true) {\n          checklistModelGetter.assign(scope.$parent, add(current, value, comparator));\n        } else {\n          checklistModelGetter.assign(scope.$parent, remove(current, value, comparator));\n        }\n      }\n\n    }\n\n    // declare one function to be used for both $watch functions\n    function setChecked(newArr, oldArr) {\n      if (checklistBeforeChange && (checklistBeforeChange(scope) === false)) {\n        setValueInChecklistModel(getChecklistValue(), ngModelGetter(scope));\n        return;\n      }\n      ngModelGetter.assign(scope, contains(newArr, getChecklistValue(), comparator));\n    }\n\n    // watch original model change\n    // use the faster $watchCollection method if it's available\n    if (angular.isFunction(scope.$parent.$watchCollection)) {\n        scope.$parent.$watchCollection(checklistModel, setChecked);\n    } else {\n        scope.$parent.$watch(checklistModel, setChecked, true);\n    }\n  }\n\n  return {\n    restrict: 'A',\n    priority: 1000,\n    terminal: true,\n    scope: true,\n    compile: function(tElement, tAttrs) {\n\n      if (!tAttrs.checklistValue && !tAttrs.value) {\n        throw 'You should provide `value` or `checklist-value`.';\n      }\n\n      // by default ngModel is 'checked', so we set it if not specified\n      if (!tAttrs.ngModel) {\n        // local scope var storing individual checkbox model\n        tAttrs.$set(\"ngModel\", \"checked\");\n      }\n\n      return postLinkFn;\n    }\n  };\n}]);\n",
    "(function (angular) {\n  'use strict';\n\n  function ConfigRoutes($stateProvider, $urlRouterProvider) {\n    $urlRouterProvider\n      .otherwise('/');\n\n    $stateProvider\n      .state('home', {\n        url: '/',\n        templateUrl: '../public/app/views/home.html',\n        controller: 'HomeController as homeCtrl'\n      })\n      .state('login', {\n        url: '/login',\n        templateUrl: '../public/app/views/login.html',\n        controller: 'LoginController as loginCtrl'\n      })\n      .state('logout', {\n        url: '/logout',\n        template: '',\n        controller: ['$state', '$window', 'AuthService', function ($state, $window, AuthService) {\n          AuthService.logout().then(function () {\n            $state.go('login');\n            $window.location.reload();\n          });\n        }]\n      })\n      .state('register', {\n        url: '/register',\n        templateUrl: '../public/app/views/register.html',\n        controller: 'RegisterController as registerCtrl'\n      })\n      .state('profile', {\n        url: '/profile',\n        templateUrl: '../public/app/views/profile.html',\n        controller: 'ProfileController as profileCtrl',\n        restrictions: {\n          role: 'editor'\n        }\n      })\n      .state('admin', {\n        url: '/admin',\n        abstract: true,\n        template: '<ui-view/>',\n        restrictions: {\n          role: 'admin'\n        }\n      })\n      .state('admin.users', {\n        url: '/users',\n        templateUrl: '../public/app/views/admin/users.html',\n        controller: 'AdminUsersController as usersCtrl'\n      })\n      .state('admin.roles', {\n        url: '/roles',\n        templateUrl: '../public/app/views/admin/roles.html',\n        controller: 'RolesController as rolesCtrl'\n      })\n      .state('admin.permissions', {\n        url: '/permissions',\n        templateUrl: '../public/app/views/admin/permissions.html',\n        controller: 'PermissionsController as permissionsCtrl'\n      });\n  }\n\n  function Run($rootScope, $state, AuthService) {\n    $rootScope.$on('$stateChangeStart', function (e, next) {\n      AuthService\n        .getUserStatus()\n        .then(function () {\n          if (AuthService.isAuthorized(next.permissions) === false || AuthService.isRole(next.role) === false) {\n            e.preventDefault();\n            $state.go('login');\n          }\n        });\n    });\n  }\n\n  function AppController(AuthService) {\n    var vm;\n    vm = this;\n    vm.isLoggedIn = AuthService.isLoggedIn;\n    vm.isAuthorized = AuthService.isAuthorized;\n  }\n\n  ConfigRoutes.$inject = ['$stateProvider', '$urlRouterProvider'];\n  Run.$inject = ['$rootScope', '$state', 'AuthService'];\n  AppController.$inject = ['AuthService'];\n\n  angular.module('mean-users', [\n    'sky',\n    'ui.router',\n    'mean-users.templates',\n    'checklist-model'\n  ])\n    .config(ConfigRoutes)\n    .run(Run)\n    .controller('AppController', AppController);\n\n}(window.angular));\n",
    "(function (angular) {\n  'use strict';\n\n  function AuthService($http, $q) {\n    var isLoggedIn,\n        service,\n        user;\n\n    isLoggedIn = false;\n    service = this;\n    user = null;\n\n    service.getUserStatus = function () {\n      var deferred;\n      deferred = $q.defer();\n      $http.get('/api/user-status').then(function (res) {\n        isLoggedIn = res.data.status;\n        user = res.data.user;\n        if (res.data.status === true) {\n          deferred.resolve();\n        } else {\n          deferred.reject();\n        }\n      }).catch(function () {\n        isLoggedIn = false;\n        user = null;\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n\n    service.isLoggedIn = function () {\n      return isLoggedIn;\n    };\n\n    service.isAuthorized = function (permission) {\n      console.log(\"isAuthorized:\", user);\n      return true;\n    };\n\n    service.isRole = function (role) {\n      var isAuthorized;\n      switch (role) {\n        case 'admin':\n        isAuthorized = true;\n        break;\n        case 'editor':\n        isAuthorized = service.isLoggedIn();\n        break;\n        default:\n        isAuthorized = true;\n        break;\n      }\n      return isAuthorized;\n    };\n\n    service.login = function (emailAddress, password) {\n      var deferred;\n      deferred = $q.defer();\n      $http.post('/api/login', {\n        emailAddress: emailAddress,\n        password: password\n      }).then(function (res) {\n        isLoggedIn = true;\n        deferred.resolve(res.data);\n      }).catch(function (res) {\n        isLoggedIn = false;\n        deferred.reject(res.data);\n      });\n      return deferred.promise;\n    };\n\n    service.logout = function () {\n      console.log(\"LOGOUT!!!\");\n      var deferred;\n      deferred = $q.defer();\n      $http\n        .get('/api/logout')\n        .then(function (res) {\n          isLoggedIn = false;\n          deferred.resolve(res.data);\n        })\n        .catch(function (res) {\n          isLoggedIn = true;\n          deferred.reject(res.data);\n        });\n      return deferred.promise;\n    };\n\n    service.register = function (data) {\n      return $http.post('/api/register', data).then(function (res) {\n        return res.data;\n      });\n    };\n  }\n\n  AuthService.$inject = ['$http', '$q'];\n\n  angular.module('mean-users')\n    .service('AuthService', AuthService);\n}(window.angular));\n",
    "(function (angular) {\n  'use strict';\n\n  function PermissionService($http) {\n    var service;\n    service = this;\n    service.getAll = function () {\n      return $http.get('/api/permissions/').then(function (res) {\n        return res.data;\n      });\n    };\n    service.create = function (data) {\n      return $http.post('/api/permissions/', data).then(function (res) {\n        return res.data;\n      });\n    };\n    service.deleteById = function (id) {\n      return $http.delete('/api/permissions/' + id).then(function (res) {\n        return res.data;\n      });\n    };\n    service.updateById = function (id, data) {\n      return $http.put('/api/permissions/' + id, data).then(function (res) {\n        return res.data;\n      });\n    };\n  }\n\n  PermissionService.$inject = [\n    '$http'\n  ];\n  angular.module('mean-users')\n    .service('PermissionService', PermissionService);\n}(window.angular));\n",
    "(function (angular) {\n  'use strict';\n\n  function RoleService($http) {\n    var service;\n    service = this;\n    service.getAll = function () {\n      return $http.get('/api/roles/').then(function (res) {\n        return res.data;\n      });\n    };\n    service.create = function (data) {\n      return $http.post('/api/roles/', data).then(function (res) {\n        return res.data;\n      });\n    };\n    service.deleteById = function (id) {\n      return $http.delete('/api/roles/' + id).then(function (res) {\n        return res.data;\n      });\n    };\n    service.updateById = function (id, data) {\n      return $http.put('/api/roles/' + id, data).then(function (res) {\n        return res.data;\n      });\n    };\n  }\n\n  RoleService.$inject = [\n    '$http'\n  ];\n  angular.module('mean-users')\n    .service('RoleService', RoleService);\n}(window.angular));\n",
    "(function (angular) {\n  'use strict';\n\n  function PermissionsController(PermissionService) {\n    var vm;\n\n    vm = this;\n    vm.formData = {};\n\n    PermissionService.getAll().then(function (data) {\n      vm.permissions = data.value;\n    });\n\n    vm.submit = function () {\n      PermissionService.create(vm.formData).then(function (data) {\n        vm.permissions.unshift(data);\n        vm.formData = {};\n      });\n    };\n\n    vm.delete = function (index) {\n      PermissionService.deleteById(vm.permissions[index]._id).then(function () {\n        vm.permissions.splice(index, 1);\n      });\n    };\n\n    vm.update = function (permission) {\n      delete permission.showEditor;\n      PermissionService.updateById(permission._id, permission).then(function (data) {\n        permission = data;\n      });\n    };\n  }\n\n  PermissionsController.$inject = ['PermissionService'];\n  angular.module('mean-users')\n    .controller('PermissionsController', PermissionsController);\n}(window.angular));\n",
    "(function (angular) {\n  'use strict';\n\n  function RolesController(PermissionService, RoleService) {\n    var vm;\n\n    vm = this;\n    vm.formData = {};\n\n    PermissionService.getAll().then(function (data) {\n      vm.permissions = data.value;\n      RoleService.getAll().then(function (data) {\n        vm.roles = data.value;\n      });\n    });\n\n    vm.submit = function () {\n      RoleService.create(vm.formData).then(function (data) {\n        vm.roles.unshift(data);\n        vm.formData = {};\n      });\n    };\n\n    vm.delete = function (index) {\n      RoleService.deleteById(vm.roles[index]._id).then(function () {\n        vm.roles.splice(index, 1);\n      });\n    };\n\n    vm.update = function (role) {\n      delete role.showEditor;\n      RoleService.updateById(role._id, role).then(function (data) {\n        role = data;\n      });\n    };\n\n    vm.toggleSelection = function (permissionId) {\n      vm.roles.forEach(function (role) {\n        var index = role.permissions.indexOf(permissionId);\n        if (index > -1) {\n          role.permissions.splice(index, 1);\n        } else {\n          role.permissions.push(permissionId);\n        }\n      });\n    };\n  }\n\n  RolesController.$inject = [\n    'PermissionService',\n    'RoleService'\n  ];\n  angular.module('mean-users')\n    .controller('RolesController', RolesController);\n}(window.angular));\n",
    "(function (angular) {\n  'use strict';\n\n  function AdminUsersController() {}\n\n  angular.module('mean-users')\n    .controller('AdminUsersController', AdminUsersController);\n}(window.angular));\n",
    "(function (angular) {\n  'use strict';\n\n  function HomeController() {}\n\n  angular.module('mean-users')\n    .controller('HomeController', HomeController);\n}(window.angular));\n",
    "(function (angular) {\n  'use strict';\n\n  function LoginController($state, $window, AuthService) {\n    var vm;\n\n    vm = this;\n    vm.formData = {};\n\n    this.submit = function () {\n      vm.disabled = true;\n      AuthService\n        .login(vm.formData.emailAddress, vm.formData.password)\n        .then(function () {\n          $state.go('home');\n          $window.location.reload();\n          vm.disabled = false;\n        })\n        .catch(function (err) {\n          alert(\"ERROR!\", err);\n          vm.disabled = false;\n        });\n    };\n  }\n\n  LoginController.$inject = ['$state', '$window', 'AuthService'];\n  angular.module('mean-users')\n    .controller('LoginController', LoginController);\n}(window.angular));\n",
    "(function (angular) {\n  'use strict';\n\n  function ProfileController() {}\n\n  angular.module('mean-users')\n    .controller('ProfileController', ProfileController);\n}(window.angular));\n",
    "(function (angular) {\n  'use strict';\n\n  function RegisterController($state, AuthService) {\n    var vm;\n\n    vm = this;\n    vm.formData = {};\n\n    vm.submit = function () {\n      vm.disabled = true;\n      AuthService\n        .register(vm.formData)\n        .then(function () {\n          $state.go('login');\n          vm.disabled = false;\n        })\n        .catch(function () {\n          alert(\"Error!\");\n          vm.formData = {};\n          vm.disabled = false;\n        });\n    };\n  }\n\n  RegisterController.$inject = [\n    '$state',\n    'AuthService'\n  ];\n\n  angular.module('mean-users')\n    .controller('RegisterController', RegisterController);\n}(window.angular));\n",
    "angular.module('mean-users.templates', []).run(['$templateCache', function($templateCache) {\n    $templateCache.put('../public/app/views/admin/permissions.html',\n        '<h1>Permissions</h1><table class=\"table table-striped\"><tr><td><form class=\"form form-inline\" ng-submit=permissionsCtrl.submit()><div class=form-group><input class=form-control id=field-permission placeholder=MY_PERMISSION ng-model=permissionsCtrl.formData.name> <button type=submit class=\"btn btn-default\">Create</button></div></form></td><td></td></tr><tr ng-repeat=\"permission in permissionsCtrl.permissions\"><td><form ng-if=permission.showEditor ng-submit=permissionsCtrl.update(permission)><input ng-model=permission.name class=form-control> <button type=submit class=\"btn btn-default btn-xs\">Update</button> <button type=button class=\"btn btn-default btn-xs\" ng-click=\"role.showEditor=false\">Cancel</button></form><span ng-if=!permission.showEditor ng-click=\"permission.showEditor=true\" ng-bind=permission.name></span></td><td ng-bind=permission._id></td><td><button class=\"btn btn-xs btn-default\" ng-click=permissionsCtrl.delete($index)>Delete</button></td></tr></table>');\n    $templateCache.put('../public/app/views/admin/roles.html',\n        '<h1>Roles</h1><table class=\"table table-striped\"><tr><td><form class=\"form form-inline\" ng-submit=rolesCtrl.submit()><div class=form-group><input class=form-control id=field-role placeholder=\"e.g. admin\" ng-model=rolesCtrl.formData.name> <button type=submit class=\"btn btn-default\">Create</button></div></form></td><td></td><td></td></tr><tr><th>Name</th><th>Permissions</th><th></th></tr><tr ng-repeat=\"role in rolesCtrl.roles\"><td><form ng-if=role.showEditor ng-submit=rolesCtrl.update(role)><div class=form-group><input ng-model=role.name class=form-control></div><button type=submit class=\"btn btn-primary btn-xs\">Update</button> <button type=button class=\"btn btn-default btn-xs\" ng-click=\"role.showEditor=false\">Cancel</button></form><span ng-if=!role.showEditor ng-click=\"role.showEditor=true\" ng-bind=role.name></span></td><td><form ng-submit=rolesCtrl.update(role)><div class=checkbox ng-repeat=\"permission in rolesCtrl.permissions\"><label><input type=checkbox ng-checked=\"role.permissions.indexOf(permission._id) > -1\" ng-click=rolesCtrl.toggleSelection(permission._id)><span ng-bind=permission.name></span></label></div><div class=form-group><button type=submit class=\"btn btn-xs btn-default\">Update</button></div></form></td><td><button class=\"btn btn-xs btn-default\" ng-click=rolesCtrl.delete($index)>Delete</button></td></tr></table>');\n    $templateCache.put('../public/app/views/admin/users.html',\n        'Users');\n    $templateCache.put('../public/app/views/home.html',\n        'Home');\n    $templateCache.put('../public/app/views/login.html',\n        '<h1>Log in</h1><form class=form ng-submit=loginCtrl.submit()><div class=form-group><label for=field-email-address>Email address</label><input type=email class=form-control id=field-email-address ng-model=loginCtrl.formData.emailAddress></div><div class=form-group><label for=field-password>Password</label><input type=password class=form-control id=field-password ng-model=loginCtrl.formData.password></div><div class=form-group><button type=submit class=\"btn btn-primary\" ng-disabled=loginCtrl.disabled>Log in</button></div></form>');\n    $templateCache.put('../public/app/views/profile.html',\n        'Profile');\n    $templateCache.put('../public/app/views/register.html',\n        '<h1>Register</h1><form class=form ng-submit=registerCtrl.submit()><div class=form-group><label for=field-email-address>Email address</label><input type=email class=form-control id=field-email-address ng-model=registerCtrl.formData.emailAddress></div><div class=form-group><label for=field-password>Password</label><input type=password class=form-control id=field-password ng-model=registerCtrl.formData.password></div><div class=form-group><button type=submit class=\"btn btn-primary\" ng-disabled=registerCtrl.disabled>Register</button></div></form>');\n}]);\n"
  ]
}